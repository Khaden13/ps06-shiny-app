checkboxGroupInput("trendline",
label = "Trend Line",
choices = c("Trend Line" = 1),
selected = c(1))
),
conditionalPanel(condition="input.conditionedPanels==3",
helpText("Summary statistics"),
checkboxGroupInput("minmax",
label = "Display minimum and maximum",
choices = c("Display" = 1),
selected = c(1))
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Summary",
br(),
h1("Temperature Data Summary"),
p("This data measures the various temperature data found in various regions"),
p("Temperature ",
em("temp"),
"is measured in Celsius."),
p("The temperature is measured in 27 different unique regions from the year 1978-2023"),
br(),
tableOutput("head"), value=1),
tabPanel("Plot", plotOutput("yeartempPlot"), value=2),
tabPanel("Table", tableOutput("summarystats"), value=3),
id = "conditionedPanels"
),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
#Summary
output$head <- renderTable({
head(df)
})
#Plot
output$yeartempPlot <- renderPlot({
if(1 %in% input$trendline){
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point() + geom_smooth(method="lm")
}
else{
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point()
}
})
#Table
output$summarystats <- renderTable({
if(1 %in% input$minmax){
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd,
min=min,
max=max))
}
else{
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
df [sample (1:nrow (df), 3),]
library(shiny)
library(tidyverse)
df <- read.delim("UAH-lower-troposphere-long.csv.bz2")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("UAH Lower Troposhere Tempurature Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
conditionalPanel(condition="input.conditionedPanels==2",
helpText("Region"),
selectInput("region_selection",
"Region",
choices = df %>%
select(region) %>%
group_by(region) %>%
distinct()),
checkboxGroupInput("trendline",
label = "Trend Line",
choices = c("Trend Line" = 1),
selected = c(1))
),
conditionalPanel(condition="input.conditionedPanels==3",
helpText("Summary statistics"),
checkboxGroupInput("minmax",
label = "Display minimum and maximum",
choices = c("Display" = 1),
selected = c(1))
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Summary",
br(),
h1("Temperature Data Summary"),
p("This data measures the various temperature data found in various regions"),
p("Temperature ",
em("temp"),
"is measured in Celsius."),
p("The temperature is measured in 27 different unique regions from the year 1978-2023"),
br(),
tableOutput("head"), value=1),
tabPanel("Plot", plotOutput("yeartempPlot"), value=2),
tabPanel("Table", tableOutput("summarystats"), value=3),
id = "conditionedPanels"
),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
#Summary
output$head <- renderTable({
df [sample (1:nrow (df), 3),]
})
#Plot
output$yeartempPlot <- renderPlot({
if(1 %in% input$trendline){
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point() + geom_smooth(method="lm")
}
else{
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point()
}
})
#Table
output$summarystats <- renderTable({
if(1 %in% input$minmax){
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd,
min=min,
max=max))
}
else{
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
df <- read.delim("UAH-lower-troposphere-long.csv.bz2")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("UAH Lower Troposhere Tempurature Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
conditionalPanel(condition="input.conditionedPanels==2",
helpText("Region"),
selectInput("region_selection",
"Region",
choices = df %>%
select(region) %>%
group_by(region) %>%
distinct()),
checkboxGroupInput("trendline",
label = "Trend Line",
choices = c("Trend Line" = 1),
selected = c(1))
),
conditionalPanel(condition="input.conditionedPanels==3",
helpText("Summary statistics"),
checkboxGroupInput("minmax",
label = "Display minimum and maximum",
choices = c("Display" = 1),
selected = c(1))
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Summary",
br(),
h1("Temperature Data Summary"),
p("This data measures the various temperature data found in various regions"),
p("Temperature ",
em("temp"),
"is measured in Celsius."),
p("The temperature is measured in 27 different unique regions from the year 1978-2023"),
br(),
tableOutput("head"), value=1),
tabPanel("Plot", plotOutput("yeartempPlot"), value=2),
tabPanel("Table", tableOutput("summarystats"), value=3),
id = "conditionedPanels"
),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
#Summary
output$head <- renderTable({
df [sample (1:nrow (df), 6),]
})
#Plot
output$yeartempPlot <- renderPlot({
if(1 %in% input$trendline){
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point() + geom_smooth(method="lm")
}
else{
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point()
}
})
#Table
output$summarystats <- renderTable({
if(1 %in% input$minmax){
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd,
min=min,
max=max))
}
else{
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
df <- read.delim("UAH-lower-troposphere-long.csv.bz2")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("UAH Lower Troposhere Tempurature Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
conditionalPanel(condition="input.conditionedPanels==2",
helpText("Region"),
selectInput("region_selection",
"Region",
choices = df %>%
select(region) %>%
group_by(region) %>%
distinct()),
checkboxGroupInput("trendline",
label = "Trend Line",
choices = c("Trend Line" = 1),
selected = c(1))
),
conditionalPanel(condition="input.conditionedPanels==3",
helpText("Summary statistics"),
checkboxGroupInput("minmax",
label = "Display minimum and maximum",
choices = c("Display" = 1),
selected = c(1))
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Summary",
br(),
h1("Temperature Data Summary"),
p("This data measures the various temperature data found in various regions"),
p("Temperature ",
em("temp"),
"is measured in Celsius."),
p("The temperature is measured in 27 different unique regions from the year 1978-2023.
Here is a small random sample of the data"),
br(),
tableOutput("head"), value=1),
tabPanel("Plot", plotOutput("yeartempPlot"), value=2),
tabPanel("Table", tableOutput("summarystats"), value=3),
id = "conditionedPanels"
),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
#Summary
output$head <- renderTable({
df [sample (1:nrow (df), 6),]
})
#Plot
output$yeartempPlot <- renderPlot({
if(1 %in% input$trendline){
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point() + geom_smooth(method="lm")
}
else{
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point()
}
})
#Table
output$summarystats <- renderTable({
if(1 %in% input$minmax){
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd,
min=min,
max=max))
}
else{
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
df <- read.delim("UAH-lower-troposphere-long.csv.bz2")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("UAH Lower Troposhere Tempurature Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
conditionalPanel(condition="input.conditionedPanels==2",
helpText("Region"),
selectInput("region_selection",
"Region",
choices = df %>%
select(region) %>%
group_by(region) %>%
distinct()),
checkboxGroupInput("trendline",
label = "Trend Line",
choices = c("Trend Line" = 1),
selected = c(1))
),
conditionalPanel(condition="input.conditionedPanels==3",
helpText("Summary statistics"),
checkboxGroupInput("minmax",
label = "Display minimum and maximum",
choices = c("Display" = 1),
selected = c(1))
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Summary",
br(),
h1("Temperature Data Summary"),
p("This data measures the various temperature data found in different regions."),
p("Temperature ",
em("temp"),
"is measured in Celsius. The temperature is measured in 27 different unique regions from the year 1978-2023."),
p("Below is a small random sample of the data"),
br(),
tableOutput("head"), value=1),
tabPanel("Plot", plotOutput("yeartempPlot"), value=2),
tabPanel("Table", tableOutput("summarystats"), value=3),
id = "conditionedPanels"
),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
#Summary
output$head <- renderTable({
df [sample (1:nrow (df), 6),]
})
#Plot
output$yeartempPlot <- renderPlot({
if(1 %in% input$trendline){
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point() + geom_smooth(method="lm")
}
else{
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point()
}
})
#Table
output$summarystats <- renderTable({
if(1 %in% input$minmax){
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd,
min=min,
max=max))
}
else{
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
df <- read.delim("UAH-lower-troposphere-long.csv.bz2")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("UAH Lower Troposhere Tempurature Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
conditionalPanel(condition="input.conditionedPanels==2",
helpText("Region"),
selectInput("region_selection",
"Region",
choices = df %>%
select(region) %>%
group_by(region) %>%
distinct()),
checkboxGroupInput("trendline",
label = "Trend Line",
choices = c("Trend Line" = 1),
selected = c(1))
),
conditionalPanel(condition="input.conditionedPanels==3",
helpText("Summary statistics"),
checkboxGroupInput("minmax",
label = "Display minimum and maximum",
choices = c("Display" = 1),
selected = c(1))
)
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("Summary",
br(),
h1("Temperature Data Summary"),
p("This data measures the various temperature data found in different regions."),
p("Temperature ",
em("temp"),
"is measured in Celsius. The temperature is measured in 27 different unique regions from the year 1978-2023."),
p("Below is a small random sample of the data"),
br(),
tableOutput("head"), value=1),
tabPanel("Plot", plotOutput("yeartempPlot"), value=2),
tabPanel("Table", tableOutput("summarystats"), value=3),
id = "conditionedPanels"
),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
#Summary
output$head <- renderTable({
df [sample (1:nrow (df), 6),]
})
#Plot
output$yeartempPlot <- renderPlot({
if(1 %in% input$trendline){
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point() + geom_smooth(method="lm")
}
else{
df %>% filter(region==input$region_selection) %>% ggplot(aes(x=year, y=temp)) +
geom_point()
}
})
#Table
output$summarystats <- renderTable({
if(1 %in% input$minmax){
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd,
min=min,
max=max))
}
else{
df %>% group_by(year) %>% select(temp) %>%
summarise_each(
funs(mean=mean,
sd=sd))
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
